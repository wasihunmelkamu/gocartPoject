generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// =======================
//        MODELS
// =======================

model User {
  id           String     @id
  name         String
  email        String     @unique
  image        String
  cart         Json?      // removed @default("{}")

  // Relations
  ratings      Rating[]
  addresses    Address[]
  store        Store?
  buyerOrders  Order[]    @relation("BuyerRelation")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  mrp         Float
  price       Float
  images      String
  category    String
  inStock     Boolean     @default(true)
  storeId     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  store       Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  ratings     Rating[]
}

enum OrderStatus {
  ORDER_PLACED
  PROCESSING
  SHIPPED
  DELIVERED
}

enum PaymentMethod {
  COD
  STRIPE
}

model Order {
  id            String         @id @default(uuid())
  total         Float
  status        OrderStatus    @default(ORDER_PLACED)
  userId        String
  storeId       String
  addressId     String
  isPaid        Boolean        @default(false)
  paymentMethod PaymentMethod
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isCouponUsed  Boolean        @default(false)
  coupon        Json?          // removed @default("{}")

  orderItems    OrderItem[]
  user          User           @relation("BuyerRelation", fields: [userId], references: [id])
  store         Store          @relation(fields: [storeId], references: [id])
  address       Address        @relation(fields: [addressId], references: [id])
}

model OrderItem {
  orderId   String
  productId String
  quantity  Int
  price     Float

  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
}

model Rating {
  id        String   @id @default(uuid())
  rating    Int
  review    String
  userId    String
  productId String
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  name      String
  email     String
  street    String
  city      String
  state     String
  zip       String
  country   String
  phone     String
  createdAt DateTime @default(now())

  orders    Order[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Coupon {
  code        String   @id
  description String
  discount    Float
  forNewUser  Boolean
  forMember   Boolean  @default(false)
  isPublic    Boolean
  expiresAt   DateTime
  createdAt   DateTime @default(now())
}

model Store {
  id          String   @id @default(uuid())
  userId      String   @unique
  name        String
  description String
  username    String
  address     String
  status      String   @default("pending")
  isActive    Boolean  @default(false)
  logo        String
  email       String
  contact     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products    Product[]
  orders      Order[]
  user        User      @relation(fields: [userId], references: [id])
}
